using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectMyReadLine
{
    class Program
    {
        static void FillFrame(int left, int top, int width, int height)
        {
            Console.BackgroundColor = ConsoleColor.Blue;
            Console.ForegroundColor = ConsoleColor.White;

            int right = left + width - 1;
            int bottom = top + height - 1;

            Console.SetCursorPosition(left, top);
            Console.Write("г");
            Console.SetCursorPosition(right, top);
            Console.Write("ђ");
            Console.SetCursorPosition(left, bottom);
            Console.Write("L");
            Console.SetCursorPosition(right, bottom);
            Console.Write("-");

            string horizontal = new string('=', width - 2);
            Console.SetCursorPosition(left + 1, top);
            Console.Write(horizontal);
            Console.SetCursorPosition(left + 1, bottom);
            Console.Write(horizontal);

            string spaces = new string(' ', width - 2);

            for (int i = 1; i < height - 1; i++)
            {
                Console.SetCursorPosition(left, top + i);
                Console.Write("¶" + spaces + "¶");
            }
        }

        static string MyReadLine()
        {
            string text = "";
            // запоминаем координаты курсора (начальные)
            int startX = Console.CursorLeft;
            int startY = Console.CursorTop;

            // чтобы управл€ть курсором
            int x = startX;

            while (true)
            {
                Console.SetCursorPosition(x, startY);
                ConsoleKeyInfo info = Console.ReadKey();
                char ch = info.KeyChar;
                if (!char.IsControl(ch))
                {
                    // text += ch;
                    int pos = x - startX;
                    text = text.Insert(pos, ch + "");
                    x++;
                }


                switch (info.Key)
                {
                    case ConsoleKey.LeftArrow:
                        
                        if (x > startX)
                        {
                            x--;
                        }
                        break;
                    case ConsoleKey.RightArrow:
                        if (x < startX + text.Length)
                        {
                            x++;
                        }
                        break;
                    case ConsoleKey.Delete:
                        if (text.Length > 0)
                        {
                            int pos = x - startX;
                            if (pos < text.Length)
                            {
                                text = text.Remove(pos, 1);
                            }
                        }
                        break;
                    case ConsoleKey.Backspace:
                        if (text.Length > 0)
                        {
                            int pos = x - startX - 1;
                            if (pos >= 0)
                            {
                                text = text.Remove(pos, 1);
                                x--;
                            }
                        }
                        break;
                    case ConsoleKey.Enter:
                        return text;
                }

                // перерисовываем текст заново
                Console.SetCursorPosition(startX, startY);
                Console.Write(text + " ");
            }
        }

        static string MyReadLineLimit(int maxLen)
        {
            string text = "";
            // запоминаем координаты курсора (начальные)
            int startX = Console.CursorLeft;
            int startY = Console.CursorTop;

            // чтобы управл€ть курсором
            int x = startX;

            while (true)
            {
                Console.SetCursorPosition(x, startY);
                ConsoleKeyInfo info = Console.ReadKey();
                char ch = info.KeyChar;

                if (!char.IsControl(ch))
                {
                    // text += ch;
                    int pos = x - startX;
                    // ограничиваем длинну вводимого текста
                    if (text.Length < maxLen)
                    {
                        text = text.Insert(pos, ch + "");
                        x++;
                    }
                }


                switch (info.Key)
                {
                    case ConsoleKey.LeftArrow:
                        if (x > startX)
                        {
                            x--;
                        }
                        break;
                    case ConsoleKey.RightArrow:
                        if (x < startX + text.Length)
                        {
                            x++;
                        }
                        break;
                    case ConsoleKey.Delete:
                        if (text.Length > 0)
                        {
                            int pos = x - startX;
                            if (pos < text.Length)
                            {
                                text = text.Remove(pos, 1);
                            }
                        }
                        break;
                    case ConsoleKey.Backspace:
                        if (text.Length > 0)
                        {
                            int pos = x - startX - 1;
                            if (pos >= 0)
                            {
                                text = text.Remove(pos, 1);
                                x--;
                            }
                        }
                        break;
                    case ConsoleKey.Enter:
                        return text;
                }

                // перерисовываем текст заново
                Console.SetCursorPosition(startX, startY);
                Console.Write(text + " ");
            }
        }

        static string MyReadLinePasswordLimit(int maxLen)
        {
            string text = "";
            string stars = "";
            // запоминаем координаты курсора (начальные)
            int startX = Console.CursorLeft;
            int startY = Console.CursorTop;

            // чтобы управл€ть курсором
            int x = startX;

            while (true)
            {
                Console.SetCursorPosition(x, startY);
                ConsoleKeyInfo info = Console.ReadKey();
                char ch = info.KeyChar;

                if (!char.IsControl(ch))
                {
                    // text += ch;
                    int pos = x - startX;
                    // ограничиваем длинну вводимого текста
                    if (text.Length < maxLen)
                    {
                        text = text.Insert(pos, ch + "");
                        stars = stars.Insert(pos, "*");
                        x++;
                    }
                }


                switch (info.Key)
                {
                    case ConsoleKey.LeftArrow:
                        if (x > startX)
                        {
                            x--;
                        }
                        break;
                    case ConsoleKey.RightArrow:
                        if (x < startX + text.Length)
                        {
                            x++;
                        }
                        break;
                    case ConsoleKey.Delete:
                        if (text.Length > 0)
                        {
                            int pos = x - startX;
                            if (pos < text.Length)
                            {
                                text = text.Remove(pos, 1);
                                stars = stars.Remove(pos, 1);
                            }
                        }
                        break;
                    case ConsoleKey.Backspace:
                        if (text.Length > 0)
                        {
                            int pos = x - startX - 1;
                            if (pos >= 0)
                            {
                                text = text.Remove(pos, 1);
                                stars = stars.Remove(pos, 1);
                                x--;
                            }
                        }
                        break;
                    case ConsoleKey.Enter:
                        return text;
                }

                // перерисовываем текст заново
                Console.SetCursorPosition(startX, startY);
                Console.Write(stars + " ");
            }
        }

        static string InputLogin()
        {
            FillFrame(5, 5, 20, 10);
            Console.SetCursorPosition(7, 5);
            Console.Write("[¬ведите логин]");
            Console.SetCursorPosition(6, 6);
            string st = MyReadLineLimit(17);
            return st;
        }

        static string InputPassword()
        {
            FillFrame(5, 5, 20, 3);
            Console.SetCursorPosition(7, 5);
            Console.Write("[¬ведите пароль]");
            Console.SetCursorPosition(6, 6);
            string st = MyReadLinePasswordLimit(17);
            return st;
        }

        static void Main(string[] args)
        {
            Console.WriteLine(" астомный ReadLine");

            string login = InputLogin();

            Console.Clear();
            Console.WriteLine("вы ввели текст= {0}", login);

            Console.ReadLine();
        }
    }
}
